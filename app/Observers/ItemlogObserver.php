<?php

namespace App\Observers;

use App\Itemlog;
use App\Item;
use App\Transaction;
use App\Single_fee;

class ItemlogObserver
{
    /**
     * Handle the itemlog "created" event.
     *
     * @param  \App\Itemlog  $itemlog
     * @return void
     */
    public function created(Itemlog $itemlog)
    {
        // lets save the qty of item, for each new record from itemlog when its created.
        $item = Item::find($itemlog->item_id);
        if($itemlog->type=="addition"){
            $item->qty = $item->qty + $itemlog->qty;
        }
        elseif ($itemlog->type=="subtraction") {
            $item->qty = $item->qty - $itemlog->qty;
        }
        
        $item->save();


        //get positive numbers of item logs qty, for transaction purpose.
        $itemlog->qty = abs($itemlog->qty);
        $single_fee = Single_fee::find($itemlog->fee_ref_id);

        $subtotal = $single_fee->price * $itemlog->qty;

        $note = $single_fee->name . " " . $item->name . " " . $itemlog->qty . " " . $item->unit_name;

        Transaction::create([
            'item_id' => $item->id,
            'client_id' => $item->client_id,

            // 'fee_ref_id' => $itemlog->id,
            // 'fee_ref_table_name' => "itemlogs",

            'ref_id' => $itemlog->id,
            'ref_table_name' => "itemlogs",
            'qty' => $itemlog->qty,
            'nominal' => $subtotal,

            'desc' => $note,
            'note' => "Autogenerated from system itemlog observer."
        ]);
    }

    /**
     * Handle the itemlog "updating" event.
     *
     * @param  \App\Itemlog  $itemlog
     * @return void
     */
    public function updating(Itemlog $itemlog)
    {
        $item = Item::find($itemlog->item_id);
        $itemlog = Itemlog::find($itemlog->id);
        $item->qty = $item->qty - $itemlog->qty;
        $item->save();
    }

    /**
     * Handle the itemlog "updated" event.
     *
     * @param  \App\Itemlog  $itemlog
     * @return void
     */
    public function updated(Itemlog $itemlog)
    {
        $item = Item::find($itemlog->item_id);
        $itemlog = Itemlog::find($itemlog->id);
        $item->qty = $item->qty + $itemlog->qty;
        $item->save();

        //get positive numbers of item logs qty, for transaction purpose.
        $itemlog->qty = abs($itemlog->qty);
        $single_fee = Single_fee::find($itemlog->fee_ref_id);
        $nominal = $single_fee->price * $itemlog->qty;
        $desc = $single_fee->name . " " . $item->name . " " . $itemlog->qty . " " . $item->unit_name;

        $transaction = Transaction::find('ref_id', $itemlog->id)->where('ref_table_name', 'itemlogs');
        $transaction->qty = $itemlog->qty;
        $transaction->nominal = $nominal;
        $transaction->desc = $desc;
        $transaction->note = "Autogenerated from system itemlog observer.";
        $transaction->save();
    }

    /**
     * Handle the itemlog "deleted" event.
     *
     * @param  \App\Itemlog  $itemlog
     * @return void
     */
    public function deleted(Itemlog $itemlog)
    {
        // lets save the qty of item, for each new record from itemlog when its created.
        $item = Item::find($itemlog->item_id);
        $item->qty = $item->qty - $itemlog->qty;
        $item->save();


        //get positive numbers of item logs qty, for transaction purpose.
        $itemlog->qty = abs($itemlog->qty);
        $single_fee = Single_fee::find($itemlog->fee_ref_id);

        $subtotal = $single_fee->price * $itemlog->qty;

        $note = $single_fee->name . " " . $item->name . " " . $itemlog->qty . " " . $item->unit_name;

        $transaction = Transaction::where('ref_id', $itemlog->id)->where('ref_table_name', 'itemlogs');
        $transaction->delete();

    }

    /**
     * Handle the itemlog "restored" event.
     *
     * @param  \App\Itemlog  $itemlog
     * @return void
     */
    public function restored(Itemlog $itemlog)
    {
        //
    }

    /**
     * Handle the itemlog "force deleted" event.
     *
     * @param  \App\Itemlog  $itemlog
     * @return void
     */
    public function forceDeleted(Itemlog $itemlog)
    {
        //
    }
}
